{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/mcginty/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport TreeEditor from \"./TreeEditor\";\nimport TreeView from \"./TreeView\";\nimport GraphView from \"./GraphView\";\nimport UploadButton from \"./UploadButton\";\nimport DownloadButton from \"./DownloadButton\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [treeData, setTreeData] = useState(null);\n  const [focusedNode, setFocusedNode] = useState(null);\n  const svgRef = useRef();\n  const parseTree = text => {\n    const lines = text.split(\"\\n\");\n    const stack = [];\n    let root = null;\n    for (const line of lines) {\n      if (!line.trim()) continue;\n      const level = line.search(/\\S/);\n      const node = {\n        name: line.trim(),\n        children: []\n      };\n      while (stack.length > level) stack.pop();\n      if (stack.length === 0) {\n        root = node;\n      } else {\n        stack[stack.length - 1].children.push(node);\n      }\n      stack.push(node);\n    }\n    return root;\n  };\n  const handleTextChange = newText => {\n    setText(newText);\n    const parsed = parseTree(newText);\n    setTreeData(parsed);\n  };\n  const handleFileUpload = fileContent => {\n    setText(fileContent);\n    const parsed = parseTree(fileContent);\n    setTreeData(parsed);\n  };\n  const handleDownload = (content, filename, type = \"text/plain\") => {\n    const blob = new Blob([content], {\n      type\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  const generateHTML = node => {\n    if (!node) return \"\";\n    const childrenHTML = node.children && node.children.length > 0 ? `<div class=\"children\" style=\"margin-left:1em;\">${node.children.map(generateHTML).join(\"\")}</div>` : \"\";\n    return `<div>\n    <span class=\"toggle-btn\" style=\"cursor:pointer;font-weight:bold;\">${node.name}</span>\n    ${childrenHTML}\n  </div>`;\n  };\n  const exportAsHTML = () => {\n    const html = `<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>McGinty Tree</title>\n  <style>\n    .toggle-btn { cursor: pointer; font-weight: bold; }\n    .children { margin-left: 1em; display: block; }\n  </style>\n</head>\n<body>\n  ${generateHTML(treeData)}\n  <script>\n    document.querySelectorAll('.toggle-btn').forEach(btn => {\n      btn.addEventListener('click', () => {\n        const next = btn.nextElementSibling;\n        if (next && next.classList.contains('children')) {\n          next.style.display = next.style.display === 'none' ? 'block' : 'none';\n        }\n      });\n    });\n  </script>\n</body>\n</html>`;\n    handleDownload(html, \"mcginty_tree.html\", \"text/html\");\n  };\n  const exportAsJSON = () => {\n    handleDownload(JSON.stringify(treeData, null, 2), \"mcginty_tree.json\");\n  };\n  const exportAsSVG = () => {\n    const svgElement = svgRef.current;\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml;charset=utf-8\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"mcginty_tree.svg\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"McGinty Family Tree Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-bar\",\n      children: [/*#__PURE__*/_jsxDEV(UploadButton, {\n        onFileLoaded: handleFileUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n        onClick: exportAsJSON,\n        label: \"Download JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n        onClick: exportAsHTML,\n        label: \"Download HTML\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n        onClick: exportAsSVG,\n        label: \"Download SVG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), focusedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFocusedNode(null),\n        children: \"Unfocus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(TreeEditor, {\n        text: text,\n        onTextChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TreeView, {\n        data: treeData,\n        focusedNode: focusedNode,\n        onFocus: setFocusedNode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GraphView, {\n      data: treeData,\n      focusedNode: focusedNode,\n      svgRef: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zMUXmhLeydZ3Vb1ggYAM9wHK3Hw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","TreeEditor","TreeView","GraphView","UploadButton","DownloadButton","jsxDEV","_jsxDEV","App","_s","text","setText","treeData","setTreeData","focusedNode","setFocusedNode","svgRef","parseTree","lines","split","stack","root","line","trim","level","search","node","name","children","length","pop","push","handleTextChange","newText","parsed","handleFileUpload","fileContent","handleDownload","content","filename","type","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","generateHTML","childrenHTML","map","join","exportAsHTML","html","exportAsJSON","JSON","stringify","exportAsSVG","svgElement","current","svgData","XMLSerializer","serializeToString","className","fileName","_jsxFileName","lineNumber","columnNumber","onFileLoaded","onClick","label","onTextChange","data","onFocus","_c","$RefreshReg$"],"sources":["/home/jbrannigan/src/mcginty/src/App.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport TreeEditor from \"./TreeEditor\";\nimport TreeView from \"./TreeView\";\nimport GraphView from \"./GraphView\";\nimport UploadButton from \"./UploadButton\";\nimport DownloadButton from \"./DownloadButton\";\nimport \"./App.css\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [treeData, setTreeData] = useState(null);\n  const [focusedNode, setFocusedNode] = useState(null);\n  const svgRef = useRef();\n\n  const parseTree = (text) => {\n    const lines = text.split(\"\\n\");\n    const stack = [];\n    let root = null;\n\n    for (const line of lines) {\n      if (!line.trim()) continue;\n      const level = line.search(/\\S/);\n      const node = { name: line.trim(), children: [] };\n\n      while (stack.length > level) stack.pop();\n\n      if (stack.length === 0) {\n        root = node;\n      } else {\n        stack[stack.length - 1].children.push(node);\n      }\n      stack.push(node);\n    }\n    return root;\n  };\n\n  const handleTextChange = (newText) => {\n    setText(newText);\n    const parsed = parseTree(newText);\n    setTreeData(parsed);\n  };\n\n  const handleFileUpload = (fileContent) => {\n    setText(fileContent);\n    const parsed = parseTree(fileContent);\n    setTreeData(parsed);\n  };\n\n  const handleDownload = (content, filename, type = \"text/plain\") => {\n    const blob = new Blob([content], { type });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\nconst generateHTML = (node) => {\n  if (!node) return \"\";\n  const childrenHTML =\n    node.children && node.children.length > 0\n      ? `<div class=\"children\" style=\"margin-left:1em;\">${node.children\n          .map(generateHTML)\n          .join(\"\")}</div>`\n      : \"\";\n  return `<div>\n    <span class=\"toggle-btn\" style=\"cursor:pointer;font-weight:bold;\">${node.name}</span>\n    ${childrenHTML}\n  </div>`;\n};\n\n\nconst exportAsHTML = () => {\n  const html = `<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>McGinty Tree</title>\n  <style>\n    .toggle-btn { cursor: pointer; font-weight: bold; }\n    .children { margin-left: 1em; display: block; }\n  </style>\n</head>\n<body>\n  ${generateHTML(treeData)}\n  <script>\n    document.querySelectorAll('.toggle-btn').forEach(btn => {\n      btn.addEventListener('click', () => {\n        const next = btn.nextElementSibling;\n        if (next && next.classList.contains('children')) {\n          next.style.display = next.style.display === 'none' ? 'block' : 'none';\n        }\n      });\n    });\n  </script>\n</body>\n</html>`;\n  handleDownload(html, \"mcginty_tree.html\", \"text/html\");\n};\n\n\n  const exportAsJSON = () => {\n    handleDownload(JSON.stringify(treeData, null, 2), \"mcginty_tree.json\");\n  };\n\n  const exportAsSVG = () => {\n    const svgElement = svgRef.current;\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], { type: \"image/svg+xml;charset=utf-8\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"mcginty_tree.svg\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>McGinty Family Tree Editor</h1>\n      <div className=\"button-bar\">\n        <UploadButton onFileLoaded={handleFileUpload} />\n        <DownloadButton onClick={exportAsJSON} label=\"Download JSON\" />\n        <DownloadButton onClick={exportAsHTML} label=\"Download HTML\" />\n        <DownloadButton onClick={exportAsSVG} label=\"Download SVG\" />\n        {focusedNode && (\n          <button onClick={() => setFocusedNode(null)}>Unfocus</button>\n        )}\n      </div>\n      <div className=\"editor-container\">\n        <TreeEditor text={text} onTextChange={handleTextChange} />\n        <TreeView\n          data={treeData}\n          focusedNode={focusedNode}\n          onFocus={setFocusedNode}\n        />\n      </div>\n      <GraphView data={treeData} focusedNode={focusedNode} svgRef={svgRef} />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMiB,MAAM,GAAGhB,MAAM,CAAC,CAAC;EAEvB,MAAMiB,SAAS,GAAIP,IAAI,IAAK;IAC1B,MAAMQ,KAAK,GAAGR,IAAI,CAACS,KAAK,CAAC,IAAI,CAAC;IAC9B,MAAMC,KAAK,GAAG,EAAE;IAChB,IAAIC,IAAI,GAAG,IAAI;IAEf,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;MACxB,IAAI,CAACI,IAAI,CAACC,IAAI,CAAC,CAAC,EAAE;MAClB,MAAMC,KAAK,GAAGF,IAAI,CAACG,MAAM,CAAC,IAAI,CAAC;MAC/B,MAAMC,IAAI,GAAG;QAAEC,IAAI,EAAEL,IAAI,CAACC,IAAI,CAAC,CAAC;QAAEK,QAAQ,EAAE;MAAG,CAAC;MAEhD,OAAOR,KAAK,CAACS,MAAM,GAAGL,KAAK,EAAEJ,KAAK,CAACU,GAAG,CAAC,CAAC;MAExC,IAAIV,KAAK,CAACS,MAAM,KAAK,CAAC,EAAE;QACtBR,IAAI,GAAGK,IAAI;MACb,CAAC,MAAM;QACLN,KAAK,CAACA,KAAK,CAACS,MAAM,GAAG,CAAC,CAAC,CAACD,QAAQ,CAACG,IAAI,CAACL,IAAI,CAAC;MAC7C;MACAN,KAAK,CAACW,IAAI,CAACL,IAAI,CAAC;IAClB;IACA,OAAOL,IAAI;EACb,CAAC;EAED,MAAMW,gBAAgB,GAAIC,OAAO,IAAK;IACpCtB,OAAO,CAACsB,OAAO,CAAC;IAChB,MAAMC,MAAM,GAAGjB,SAAS,CAACgB,OAAO,CAAC;IACjCpB,WAAW,CAACqB,MAAM,CAAC;EACrB,CAAC;EAED,MAAMC,gBAAgB,GAAIC,WAAW,IAAK;IACxCzB,OAAO,CAACyB,WAAW,CAAC;IACpB,MAAMF,MAAM,GAAGjB,SAAS,CAACmB,WAAW,CAAC;IACrCvB,WAAW,CAACqB,MAAM,CAAC;EACrB,CAAC;EAED,MAAMG,cAAc,GAAGA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,IAAI,GAAG,YAAY,KAAK;IACjE,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,OAAO,CAAC,EAAE;MAAEE;IAAK,CAAC,CAAC;IAC1C,MAAMG,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;IACrC,MAAMK,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACrCF,CAAC,CAACG,IAAI,GAAGN,GAAG;IACZG,CAAC,CAACI,QAAQ,GAAGX,QAAQ;IACrBO,CAAC,CAACK,KAAK,CAAC,CAAC;IACTP,GAAG,CAACQ,eAAe,CAACT,GAAG,CAAC;EAC1B,CAAC;EAEH,MAAMU,YAAY,GAAI3B,IAAI,IAAK;IAC7B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;IACpB,MAAM4B,YAAY,GAChB5B,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACE,QAAQ,CAACC,MAAM,GAAG,CAAC,GACrC,kDAAkDH,IAAI,CAACE,QAAQ,CAC5D2B,GAAG,CAACF,YAAY,CAAC,CACjBG,IAAI,CAAC,EAAE,CAAC,QAAQ,GACnB,EAAE;IACR,OAAO;AACT,wEAAwE9B,IAAI,CAACC,IAAI;AACjF,MAAM2B,YAAY;AAClB,SAAS;EACT,CAAC;EAGD,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,IAAI,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIL,YAAY,CAACzC,QAAQ,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;IACNyB,cAAc,CAACqB,IAAI,EAAE,mBAAmB,EAAE,WAAW,CAAC;EACxD,CAAC;EAGC,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzBtB,cAAc,CAACuB,IAAI,CAACC,SAAS,CAACjD,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,mBAAmB,CAAC;EACxE,CAAC;EAED,MAAMkD,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,UAAU,GAAG/C,MAAM,CAACgD,OAAO;IACjC,MAAMC,OAAO,GAAG,IAAIC,aAAa,CAAC,CAAC,CAACC,iBAAiB,CAACJ,UAAU,CAAC;IACjE,MAAMtB,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACuB,OAAO,CAAC,EAAE;MAAEzB,IAAI,EAAE;IAA8B,CAAC,CAAC;IACzE,MAAMG,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;IACrC,MAAMK,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACrCF,CAAC,CAACG,IAAI,GAAGN,GAAG;IACZG,CAAC,CAACI,QAAQ,GAAG,kBAAkB;IAC/BJ,CAAC,CAACK,KAAK,CAAC,CAAC;IACTP,GAAG,CAACQ,eAAe,CAACT,GAAG,CAAC;EAC1B,CAAC;EAED,oBACEpC,OAAA;IAAK6D,SAAS,EAAC,KAAK;IAAAxC,QAAA,gBAClBrB,OAAA;MAAAqB,QAAA,EAAI;IAA0B;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCjE,OAAA;MAAK6D,SAAS,EAAC,YAAY;MAAAxC,QAAA,gBACzBrB,OAAA,CAACH,YAAY;QAACqE,YAAY,EAAEtC;MAAiB;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChDjE,OAAA,CAACF,cAAc;QAACqE,OAAO,EAAEf,YAAa;QAACgB,KAAK,EAAC;MAAe;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/DjE,OAAA,CAACF,cAAc;QAACqE,OAAO,EAAEjB,YAAa;QAACkB,KAAK,EAAC;MAAe;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC/DjE,OAAA,CAACF,cAAc;QAACqE,OAAO,EAAEZ,WAAY;QAACa,KAAK,EAAC;MAAc;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAC5D1D,WAAW,iBACVP,OAAA;QAAQmE,OAAO,EAAEA,CAAA,KAAM3D,cAAc,CAAC,IAAI,CAAE;QAAAa,QAAA,EAAC;MAAO;QAAAyC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAC7D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACNjE,OAAA;MAAK6D,SAAS,EAAC,kBAAkB;MAAAxC,QAAA,gBAC/BrB,OAAA,CAACN,UAAU;QAACS,IAAI,EAAEA,IAAK;QAACkE,YAAY,EAAE5C;MAAiB;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1DjE,OAAA,CAACL,QAAQ;QACP2E,IAAI,EAAEjE,QAAS;QACfE,WAAW,EAAEA,WAAY;QACzBgE,OAAO,EAAE/D;MAAe;QAAAsD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNjE,OAAA,CAACJ,SAAS;MAAC0E,IAAI,EAAEjE,QAAS;MAACE,WAAW,EAAEA,WAAY;MAACE,MAAM,EAAEA;IAAO;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpE,CAAC;AAEV;AAAC/D,EAAA,CArIQD,GAAG;AAAAuE,EAAA,GAAHvE,GAAG;AAuIZ,eAAeA,GAAG;AAAC,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}